{
  "lastFetched": "2020-02-19T22:17:37.664Z",
  "children": [
    {
      "id": 2065741235,
      "feed_id": 1256917,
      "title": "3D Glasses with Perspective Origin",
      "author": null,
      "summary": "This is the fifth article in a series discussing different optical illusions & mechanical toys and how we can recreate them on the web (and learn from them). Unlike the other articles in this series, the full effects require a physical item — specifically",
      "content": "<p class=\"preamble\">This is the fifth article in a <a href=\"https://danielcwilson.com/tags/illusions\">series discussing different optical illusions &amp; mechanical toys</a> and how we can recreate them on the web (and learn from them).</p>\n\n<p class=\"preamble\">Unlike the other articles in this series, the full effects require a physical item — specifically a pair of 3D Glasses with the red and cyan lenses or a Google Cardboard.</p>\n\n<p>The classic-looking red-cyan 3D glasses have been around for <a href=\"https://en.wikipedia.org/wiki/Anaglyph_3D#History\">about a century</a>, and we can build their corresponding images on the web with a little help from 3D Transforms, perspective, and blend modes.</p>\n\n<p class=\"codepen\" data-height=\"416\" data-theme-id=\"0\" data-default-tab=\"result\" data-user=\"danwilson\" data-slug-hash=\"gyxEdw\" style=\"height:416px;box-sizing:border-box;display:flex;align-items:center;justify-content:center;border:2px solid black;margin:1em 0;padding:1em\" data-pen-title=\"3D Glasses / Google Cardboard Toggle - Black on White\">\n  <span>See the Pen <a href=\"https://codepen.io/danwilson/pen/gyxEdw/\">\n  3D Glasses / Google Cardboard Toggle - Black on White</a> by Dan Wilson (<a href=\"https://codepen.io/danwilson\">@danwilson</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n\n<h3 id=\"anaglyphs-and-blend-modes\">Anaglyphs and Blend Modes</h3>\n\n<p>A few years ago, <a href=\"https://una.im\">Una Kravets</a> wrote a great article about how you can use <a href=\"https://una.im/3d-effect/\">blend modes to create your own 3D images</a> - known as anaglyphs. We can take two images, and apply a cyan screen to one and red to the other. These images are then overlayed. The 3D glasses force one eye to see one image, the other eye sees the other image, and the brain does its magic to create apparent depth.</p>\n\n<p>The key to a successful anaglyph is a change in perspective for the images. You can take an photo with a camera having the viewfinder at your left eye (assuming that your camera still has an eye-level <a href=\"https://en.wikipedia.org/wiki/Viewfinder\">viewfinder</a>). Then you can move the viewfinder to your other eye and take the photo again. Your two images will be fairly similar except a slight change in perspective has happened as each eye has a slightly different viewing angle of your subject.</p>\n\n<p>These images can then be placed on top of each other with the appropriate red and cyan screens applied. How far apart the different colors are at given points in the image determines the perceived depth.</p>\n\n<figure>\n  <img src=\"https://danielcwilson.com/img/posts/2019/anaglyph.jpg\">\n  <figcaption>A final anaglyph composed from two separate photos.</figcaption>\n</figure>\n\n<h3 id=\"not-everyone-has-the-luxury-of-a-viewfinder\">Not everyone has the luxury of a viewfinder</h3>\n\n<p>We don’t even need a camera, because on the web we have 3D Transforms… with built-in perspective. As objects in a line get further away (such as with a negative <code class=\"highlighter-rouge\">translateZ</code> value) they appear smaller and ultimately resolve towards a <a href=\"https://www.merriam-webster.com/dictionary/vanishing%20point\">vanishing point</a>, giving us perspective for a given scene.</p>\n\n<figure>\n  <img src=\"https://danielcwilson.com/img/posts/2019/perspective-origin.jpg\">\n  <figcaption>Boxes in parallel lines moving away from the viewer ultimately appear to meet.</figcaption>\n</figure>\n\n<p>Individual elements can share the same 3D space, and they can therefore also share the same <code class=\"highlighter-rouge\">perspective</code>. We can set our <a href=\"https://tympanus.net/codrops/css_reference/perspective/\"><code class=\"highlighter-rouge\">perspective</code> property</a> with a length value that ultimately shows how exaggerated our 3D depth effect is. By default our effective vanishing point is in the center of the 3D space. However, we have ways to control this point via the <code class=\"highlighter-rouge\">perspective-origin</code> property. With the exact same <code class=\"highlighter-rouge\">transform</code> value we can get very different looking scenes by <a href=\"https://codepen.io/danwilson/pen/zXYNao\">changing only our <code class=\"highlighter-rouge\">perspective-origin</code></a>.</p>\n\n<figure class=\"grid\">\n  <img src=\"https://danielcwilson.com/img/posts/2019/perspective-origin2050.jpg\">\n  <img src=\"https://danielcwilson.com/img/posts/2019/perspective-origin5020.jpg\">\n  <img src=\"https://danielcwilson.com/img/posts/2019/perspective-origin8080.jpg\">\n  <figcaption>The same 3d transforms with <code>perspective-origin</code> values of <code>20% 50%</code>, <code>50% 20%</code>, and <code>80% 80%</code>. Explore more in the <a href=\"https://codepen.io/danwilson/pen/zXYNao\">live perspective-origin demo</a>.</figcaption>\n</figure>\n\n<h3 id=\"doubling-the-perspective\">Doubling the perspective</h3>\n\n<p>Much like we can take two photos from a slightly different perspective, we can create two scenes and adjust the perspective slightly. We can set up two containing scenes — one for our left eye and one for our right eye. We will give each scene the same <code class=\"highlighter-rouge\">perspective</code> value, and each object within each will have the same transforms applied as their duplicated counterpart in the other scene. All objects can share their respective scene’s shared 3D space via <code class=\"highlighter-rouge\">transform-style: preserve-3d</code>.</p>\n\n<p>The only difference in the compososition of the scenes will be the <code class=\"highlighter-rouge\">perspective-origin</code>. We can set one to be slightly greater than center horizontally, and the other to be slightly less. With CSS Variables (Custom Properties):</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.scene</span> <span class=\"p\">{</span>\n  <span class=\"nl\">perspective-origin</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--origin-x</span><span class=\"p\">)</span> <span class=\"m\">50%</span><span class=\"p\">;</span>\n  <span class=\"nl\">perspective</span><span class=\"p\">:</span> <span class=\"m\">20vmin</span><span class=\"p\">;</span>\n  <span class=\"py\">--diff</span><span class=\"p\">:</span> <span class=\"m\">6px</span><span class=\"p\">;</span>\n  <span class=\"py\">--origin-x</span><span class=\"p\">:</span> <span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"m\">50%</span> <span class=\"n\">-</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--diff</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.scene</span><span class=\"nd\">:nth-of-type</span><span class=\"o\">(</span><span class=\"nt\">2</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n  <span class=\"py\">--origin-x</span><span class=\"p\">:</span> <span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"m\">50%</span> <span class=\"err\">+</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--diff</span><span class=\"p\">));</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>The <code class=\"highlighter-rouge\">6px</code> is a value I chose after some experimenting, though there is surely a more mathematical way to choose that based on distance between the eye and the screen. Other values produce slightly different effects, so it’s worth exploring the difference with other values.</p>\n\n<h3 id=\"filtering-for-the-eyes\">Filtering for the eyes</h3>\n\n<p>Now that we have two overlapping scenes with a slightly different perspective, the second biggest piece of the puzzle is making sure each eye can only see the appropriate scene through the 3D glasses. It is time to create the anaglyph. We will assume our glasses have the red lens on the left eye.</p>\n\n<p>Which color goes where depends on if you want to create a dark foreground with a light background or the inverse.</p>\n\n<p>For starters, let’s assume we have black outlines on a white background. If you are using basic shapes and outlines you can set the <code class=\"highlighter-rouge\">red</code> and <code class=\"highlighter-rouge\">cyan</code> colors directly on your elements. The elements in your left scene get cyan, the right ones get red. Then we apply a <code class=\"highlighter-rouge\">mix-blend-mode: multiply</code> to the scenes. This will make any area where the red and cyan overlap turn black. When looking through the red lens, your eye will be able to see anything that is black or cyan, and your other eye will only see the red and black through the cyan lens. This relies on the same blend mode math as the <a href=\"https://danielcwilson.com/blog/2018/02/optical-fun-red-reveal\">Red Reveal lens</a> effect.</p>\n\n<p class=\"codepen\" data-height=\"416\" data-theme-id=\"0\" data-default-tab=\"result\" data-user=\"danwilson\" data-slug-hash=\"gyxEdw\" style=\"height:416px;box-sizing:border-box;display:flex;align-items:center;justify-content:center;border:2px solid black;margin:1em 0;padding:1em\" data-pen-title=\"3D Glasses / Google Cardboard Toggle - Black on White\">\n  <span>See the Pen <a href=\"https://codepen.io/danwilson/pen/gyxEdw/\">\n  3D Glasses / Google Cardboard Toggle - Black on White</a> by Dan Wilson (<a href=\"https://codepen.io/danwilson\">@danwilson</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n\n<p>If you want to have a white foreground on a black background, the colors are reversed — red on the left and cyan on the right. We also change our blend mode to a <code class=\"highlighter-rouge\">screen</code> as it similarly looks at where cyan and red overlap and turns those areas white. Now your cyan lens will reveal everything that is cyan or white, and the red lens will reveal everything that is red or white.</p>\n\n<p class=\"codepen\" data-height=\"416\" data-theme-id=\"0\" data-default-tab=\"result\" data-user=\"danwilson\" data-slug-hash=\"MRmXYp\" style=\"height:416px;box-sizing:border-box;display:flex;align-items:center;justify-content:center;border:2px solid black;margin:1em 0;padding:1em\" data-pen-title=\"3D Glasses / Google Cardboard Toggle\">\n  <span>See the Pen <a href=\"https://codepen.io/danwilson/pen/MRmXYp/\">\n  3D Glasses / Google Cardboard Toggle</a> by Dan Wilson (<a href=\"https://codepen.io/danwilson\">@danwilson</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n\n<p>If we want to work with more than just black and white, we can introduce additional blend modes. For a dark background, we will apply a cyan screen over our left scene, and a red screen over the second scene. This can be achieved with a cover for each scene of the given color and a <code class=\"highlighter-rouge\">mix-blend-mode: screen</code>.</p>\n\n<p>Then, to make sure the bottom image still shows through, we apply a <code class=\"highlighter-rouge\">mix-blend-mode: multiply</code> to the whole top scene. This combination of blend modes lets you still make out how the original scene is supposed to look, and it gets that classic every-object-has-some-red-and-some-cyan look. The additional blend mode math in this case is similar to the discussion in constructing a <a href=\"https://danielcwilson.com/blog/2018/02/optical-fun-barrier-grid\">Barrier Grid animation</a> image.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.scene</span><span class=\"nd\">::after</span> <span class=\"p\">{</span>\n  <span class=\"nl\">content</span><span class=\"p\">:</span> <span class=\"s2\">''</span><span class=\"p\">;</span>\n  <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">absolute</span><span class=\"p\">;</span>\n  <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"nl\">bottom</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"nl\">z-index</span><span class=\"p\">:</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n  <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"no\">cyan</span><span class=\"p\">;</span>\n  <span class=\"py\">mix-blend-mode</span><span class=\"p\">:</span> <span class=\"n\">screen</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.scene</span><span class=\"nd\">:nth-of-type</span><span class=\"o\">(</span><span class=\"nt\">2</span><span class=\"o\">)</span><span class=\"nd\">::after</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"no\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.scene</span><span class=\"nd\">:nth-of-type</span><span class=\"o\">(</span><span class=\"nt\">2</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n  <span class=\"py\">mix-blend-mode</span><span class=\"p\">:</span> <span class=\"n\">multiply</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p class=\"codepen\" data-height=\"360\" data-theme-id=\"0\" data-default-tab=\"result\" data-user=\"danwilson\" data-slug-hash=\"XQNxbO\" style=\"height: 360px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"3D Glasses: Radical Mathematical - Basics\">\n  <span>See the Pen <a href=\"https://codepen.io/danwilson/pen/XQNxbO/\">\n  3D Glasses: Radical Mathematical - Basics</a> by Dan Wilson (<a href=\"https://codepen.io/danwilson\">@danwilson</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n\n<h3 id=\"animating-with-3d-3d-transforms\">Animating with 3D 3D Transforms</h3>\n\n<p>Since we are already positioning everything in our scene with 3D Transforms, we can even animate our scene and take further advantage of the perspective. Performance can be affected as we are doing duplicate animations in a 3D space, and those animations are happening behind blend modes.</p>\n\n<p class=\"codepen\" data-height=\"360\" data-preview=\"true\" data-theme-id=\"0\" data-default-tab=\"result\" data-user=\"danwilson\" data-slug-hash=\"drRQXK\" style=\"height: 360px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"3D Glasses: Radical Mathematical\">\n  <span>See the Pen <a href=\"https://codepen.io/danwilson/pen/drRQXK/\">\n  3D Glasses: Radical Mathematical</a> by Dan Wilson (<a href=\"https://codepen.io/danwilson\">@danwilson</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n\n<h3 id=\"google-cardboard\">Google Cardboard</h3>\n\n<p>Even if you are unable to find a place to sell you cheap 3D glasses, you are in luck if you own a not-as-cheap-but-still-not-exorbitant version of <a href=\"https://vr.google.com/cardboard/get-cardboard/\">Google Cardboard</a>. It uses similar alignment of images based on altering viewing angles between the eyes. Except here the images are not overlayed, they appear side by side. This example uses the same perspective origin offset, and presents the two scenes side by side. They seem identical while they are apart, but the minor offset is just enough to give an additional illusion of depth when palced inside a Cardboard device.</p>\n\n<p class=\"codepen\" data-height=\"360\" data-preview=\"true\" data-theme-id=\"0\" data-default-tab=\"result\" data-user=\"danwilson\" data-slug-hash=\"MxLPqQ\" style=\"height: 360px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"Google Cardboard: Cube\">\n  <span>See the Pen <a href=\"https://codepen.io/danwilson/pen/MxLPqQ/\">\n  Google Cardboard: Cube</a> by Dan Wilson (<a href=\"https://codepen.io/danwilson\">@danwilson</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n\n<p>Rest assured: If as a society we figure out how to fit two tiny web browsers inside a classic <a href=\"https://en.wikipedia.org/wiki/View-Master\">View-Master</a> reel then I will update this article as it could use similar perspective origin magic.</p>\n\n",
      "url": "https://danielcwilson.com/blog/2019/04/optical-fun-3d-glasses/",
      "extracted_content_url": "https://extract.feedbin.com/parser/feedbin/a645d4f7e223a34360cdbd9441ad69560625f0a5?base64_url=aHR0cHM6Ly9kYW5pZWxjd2lsc29uLmNvbS9ibG9nLzIwMTkvMDQvb3B0aWNhbC1mdW4tM2QtZ2xhc3Nlcy8=",
      "published": "2019-04-15T12:30:30.000000Z",
      "created_at": "2019-04-15T12:47:36.934714Z"
    }
  ]
}